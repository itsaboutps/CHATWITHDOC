version: "3.9"

services:
  backend:
    build: ./backend
    container_name: rag_backend
    env_file:
      - .env
    depends_on:
      - postgres
      - qdrant
      - minio
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app

  # worker removed (ingestion now inline)

  frontend:
    build: ./frontend
    container_name: rag_frontend
    env_file:
      - .env
    depends_on:
      - backend
    ports:
      - "3000:3000"
    # Removed volume mount to preserve installed node_modules from image build.
    # For live development, you can reintroduce:
    # volumes:
    #   - ./frontend:/app

  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_storage:/qdrant/storage

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  minio:
    image: quay.io/minio/minio:latest
    container_name: minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data

  createbuckets:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      mc alias set local http://minio:9000 $MINIO_ROOT_USER $MINIO_ROOT_PASSWORD; \
      mc mb -p local/${MINIO_BUCKET}; \
      mc anonymous set download local/${MINIO_BUCKET}; \
      exit 0;"

  # redis removed

volumes:
  qdrant_storage: {}
  postgres_data: {}
  minio_data: {}
